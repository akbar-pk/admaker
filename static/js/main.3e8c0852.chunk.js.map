{"version":3,"sources":["topbar.js","App.js","serviceWorker.js","index.js"],"names":["observer","store","inputRef","React","useRef","useState","faqOpened","toggleFaq","Group","align","Alignment","LEFT","icon","minimal","onClick","ids","pages","map","page","children","child","id","flat","length","window","confirm","pagesIds","p","deletePages","addPage","htmlFor","document","querySelector","click","type","accept","ref","style","width","display","onChange","e","input","target","files","reader","FileReader","onloadend","json","text","result","JSON","parse","alert","loadJSON","onerror","readAsText","toJSON","url","btoa","unescape","encodeURIComponent","stringify","downloadFile","RIGHT","onClose","title","isOpen","maxWidth","className","Classes","DIALOG_BODY","href","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","App","Fragment","height","backgroundColor","margin","flex","flexDirection","position","Boolean","location","hostname","match","createStore","key","ReactDOM","render","StrictMode","getElementById"],"mappings":"sVAiBeA,sBAAS,YAAgB,IAAbC,EAAY,EAAZA,MACnBC,EAAWC,IAAMC,SAEvB,EAA+BD,IAAME,UAAS,GAA9C,mBAAOC,EAAP,KAAkBC,EAAlB,KAEA,OACE,eAAC,IAAD,WACE,eAAC,IAAOC,MAAR,CAAcC,MAAOC,IAAUC,KAA/B,UACE,cAAC,IAAD,CACEC,KAAK,aACLC,SAAO,EACPC,QAAS,WACP,IAAMC,EAAMd,EAAMe,MACfC,KAAI,SAACC,GAAD,OAAUA,EAAKC,SAASF,KAAI,SAACG,GAAD,OAAWA,EAAMC,SACjDC,OAEH,KADgB,OAAGP,QAAH,IAAGA,OAAH,EAAGA,EAAKQ,SAEjBC,OAAOC,QAAQ,wCADtB,CAKA,IAAMC,EAAWzB,EAAMe,MAAMC,KAAI,SAACU,GAAD,OAAOA,EAAEN,MAC1CpB,EAAM2B,YAAYF,GAClBzB,EAAM4B,YAfV,iBAoBA,wBAAOC,QAAQ,eAAf,UACE,cAAC,IAAD,CACElB,KAAK,cACLC,SAAO,EACPC,QAAS,WACPiB,SAASC,cAAc,iBAAiBC,SAJ5C,kBASA,uBACEC,KAAK,OACLb,GAAG,eACHc,OAAO,iBACPC,IAAKlC,EACLmC,MAAO,CAAEC,MAAO,QAASC,QAAS,QAClCC,SAAU,SAACC,GACT,IAAIC,EAAQD,EAAEE,OAEd,GAAKD,EAAME,MAAMrB,OAAjB,CAIA,IAAIsB,EAAS,IAAIC,WACjBD,EAAOE,UAAY,WACjB,IACIC,EADAC,EAAOJ,EAAOK,OAElB,IACEF,EAAOG,KAAKC,MAAMH,GAClB,MAAOR,GACPY,MAAM,6BAGJL,GACF/C,EAAMqD,SAASN,IAGnBH,EAAOU,QAAU,WACfF,MAAM,8BAERR,EAAOW,WAAWd,EAAME,MAAM,WAIpC,cAAC,IAAD,CACEhC,KAAK,cACLC,SAAO,EACPC,QAAS,WACP,IAAMkC,EAAO/C,EAAMwD,SAEbC,EACJ,yBACAlC,OAAOmC,KAAKC,SAASC,mBAAmBV,KAAKW,UAAUd,MACzDe,uBAAaL,EAAK,iBATtB,qBAeF,eAAC,IAAOlD,MAAR,CAAcC,MAAOC,IAAUsD,MAA/B,UA+BE,cAAC,IAAD,IACA,cAAC,IAAD,CAAgB/D,MAAOA,OAGzB,eAAC,IAAD,CACEW,KAAK,YACLqD,QAAS,kBAAM1D,GAAU,IACzB2D,MAAM,uBACNC,OAAQ7D,EACR+B,MAAO,CACLC,MAAO,MACP8B,SAAU,SAPd,UAUE,sBAAKC,UAAWC,IAAQC,YAAxB,UACE,yDACA,8BACE,oDADF,oMAMA,oDACA,2EAC6C,IAC3C,mBAAGC,KAAK,4CAA4C7B,OAAO,SAA3D,+BAFF,6CAK6C,IAC3C,oDANF,iBAMgD,IAC9C,mBAAG6B,KAAK,uBAAuB7B,OAAO,SAAtC,iCAPF,8DAU8D,IAC5D,6CAXF,+EAcA,wHAIA,+DACA,0DAC4B,IAC1B,mBAAG6B,KAAK,8BAA8B7B,OAAO,SAA7C,sBAFF,0DAK0D,IACxD,mBAAG6B,KAAK,uBAAuB7B,OAAO,SAAtC,uCANF,uKAaA,qIAIA,+EACiD,IAC/C,oDAFF,wDAGwB,IACtB,mBAAG6B,KAAK,uBAAuB7B,OAAO,SAAtC,yBAJF,OASA,8BACE,oDADF,0DAE4B,IAC1B,mBAAG6B,KAAK,uBAAuB7B,OAAO,SAAtC,yBAEK,IALP,YAQA,qCACO,IACL,mBAAG6B,KAAK,uBAAuB7B,OAAO,SAAtC,yBAEK,IAJP,yEAQF,qBAAK0B,UAAWC,IAAQG,cAAxB,SACE,qBAAKJ,UAAWC,IAAQI,sBAAxB,SACE,cAAC,IAAD,CAAQ5D,QAAS,kBAAMP,GAAU,IAAjC,gCCnLGoE,EAlCH,SAAC,GAAe,IAAb1E,EAAY,EAAZA,MACb,OACE,eAAC,IAAM2E,SAAP,WACE,cAAC,EAAD,CAAQ3E,MAAOA,IACf,sBACEoC,MAAO,CACLE,QAAS,OACTsC,OAAQ,oBACRvC,MAAO,OACPwC,gBAAiB,WALrB,UAQE,qBAAKzC,MAAO,CAAEC,MAAO,QAASuC,OAAQ,OAAQtC,QAAS,QAAvD,SACE,cAAC,IAAD,CAAWtC,MAAOA,MAEpB,sBACEoC,MAAO,CACLE,QAAS,OACTsC,OAAQ,OACRE,OAAQ,OACRC,KAAM,EACNC,cAAe,SACfC,SAAU,YAPd,UAUE,cAAC,IAAD,CAASjF,MAAOA,IAChB,cAAC,IAAD,CAAWA,MAAOA,IAClB,cAAC,IAAD,CAAaA,MAAOA,cCvBVkF,QACW,cAA7B3D,OAAO4D,SAASC,UAEe,UAA7B7D,OAAO4D,SAASC,UAEhB7D,OAAO4D,SAASC,SAASC,MACvB,2D,aCEArF,EAAQsF,sBAAY,CAAEC,IAAK,yBACjChE,OAAOvB,MAAQA,EAkBfwF,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAK1F,MAAOA,MAEd8B,SAAS6D,eAAe,W","file":"static/js/main.3e8c0852.chunk.js","sourcesContent":["import React from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport {\r\n  Button,\r\n  Navbar,\r\n  Alignment,\r\n  AnchorButton,\r\n  Divider,\r\n  Dialog,\r\n  Classes,\r\n} from '@blueprintjs/core';\r\nimport FaGithub from '@meronex/icons/fa/FaGithub';\r\nimport FaDiscord from '@meronex/icons/fa/FaDiscord';\r\nimport DownloadButton from 'polotno/toolbar/download-button';\r\n\r\nimport { downloadFile } from 'polotno/utils/download';\r\n\r\nexport default observer(({ store }) => {\r\n  const inputRef = React.useRef();\r\n\r\n  const [faqOpened, toggleFaq] = React.useState(false);\r\n\r\n  return (\r\n    <Navbar>\r\n      <Navbar.Group align={Alignment.LEFT}>\r\n        <Button\r\n          icon=\"new-object\"\r\n          minimal\r\n          onClick={() => {\r\n            const ids = store.pages\r\n              .map((page) => page.children.map((child) => child.id))\r\n              .flat();\r\n            const hasObjects = ids?.length;\r\n            if (hasObjects) {\r\n              if (!window.confirm('Remove all content for a new design?')) {\r\n                return;\r\n              }\r\n            }\r\n            const pagesIds = store.pages.map((p) => p.id);\r\n            store.deletePages(pagesIds);\r\n            store.addPage();\r\n          }}\r\n        >\r\n          New\r\n        </Button>\r\n        <label htmlFor=\"load-project\">\r\n          <Button\r\n            icon=\"folder-open\"\r\n            minimal\r\n            onClick={() => {\r\n              document.querySelector('#load-project').click();\r\n            }}\r\n          >\r\n            Open\r\n          </Button>\r\n          <input\r\n            type=\"file\"\r\n            id=\"load-project\"\r\n            accept=\".json,.polotno\"\r\n            ref={inputRef}\r\n            style={{ width: '180px', display: 'none' }}\r\n            onChange={(e) => {\r\n              var input = e.target;\r\n\r\n              if (!input.files.length) {\r\n                return;\r\n              }\r\n\r\n              var reader = new FileReader();\r\n              reader.onloadend = function () {\r\n                var text = reader.result;\r\n                let json;\r\n                try {\r\n                  json = JSON.parse(text);\r\n                } catch (e) {\r\n                  alert('Can not load the project.');\r\n                }\r\n\r\n                if (json) {\r\n                  store.loadJSON(json);\r\n                }\r\n              };\r\n              reader.onerror = function () {\r\n                alert('Can not load the project.');\r\n              };\r\n              reader.readAsText(input.files[0]);\r\n            }}\r\n          />\r\n        </label>\r\n        <Button\r\n          icon=\"floppy-disk\"\r\n          minimal\r\n          onClick={() => {\r\n            const json = store.toJSON();\r\n\r\n            const url =\r\n              'data:text/json;base64,' +\r\n              window.btoa(unescape(encodeURIComponent(JSON.stringify(json))));\r\n            downloadFile(url, 'polotno.json');\r\n          }}\r\n        >\r\n          Save\r\n        </Button>\r\n      </Navbar.Group>\r\n      <Navbar.Group align={Alignment.RIGHT}>\r\n        {/* <a\r\n          href=\"https://www.producthunt.com/posts/polotno-studio?utm_source=badge-featured&utm_medium=badge&utm_souce=badge-polotno-studio\"\r\n          target=\"_blank\"\r\n        >\r\n          <img\r\n            src=\"https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=281373&theme=dark\"\r\n            alt=\"Polotno Studio - Canva-like design editor, without signups or ads. | Product Hunt\"\r\n            style={{ height: '30px', marginBottom: '-4px' }}\r\n          />\r\n        </a> */}\r\n        {/* <AnchorButton\r\n          minimal\r\n          href=\"https://github.com/lavrton/polotno-studio\"\r\n          target=\"_blank\"\r\n          icon={<FaGithub className=\"bp3-icon\" style={{ fontSize: '20px' }} />}\r\n        >\r\n          Github\r\n        </AnchorButton>\r\n        <AnchorButton\r\n          minimal\r\n          href=\"https://discord.gg/W2VeKgsr9J\"\r\n          target=\"_blank\"\r\n          icon={<FaDiscord className=\"bp3-icon\" style={{ fontSize: '20px' }} />}\r\n        >\r\n          Join Chat\r\n        </AnchorButton>\r\n        <Button icon=\"info-sign\" minimal onClick={() => toggleFaq(true)}>\r\n          About\r\n        </Button> */}\r\n\r\n        <Divider />\r\n        <DownloadButton store={store} />\r\n        {/* <NavbarHeading>Polotno Studio</NavbarHeading> */}\r\n      </Navbar.Group>\r\n      <Dialog\r\n        icon=\"info-sign\"\r\n        onClose={() => toggleFaq(false)}\r\n        title=\"About Polotno Studio\"\r\n        isOpen={faqOpened}\r\n        style={{\r\n          width: '80%',\r\n          maxWidth: '700px',\r\n        }}\r\n      >\r\n        <div className={Classes.DIALOG_BODY}>\r\n          <h2>What is Polotno Studio?</h2>\r\n          <p>\r\n            <strong>Polotno Studio</strong> - is a web application to create\r\n            graphical designs. You can mix image, text and illustrations to make\r\n            social media posts, youtube previews, podcast covers, business cards\r\n            and presentations.\r\n          </p>\r\n          <h2>Is it Open Source?</h2>\r\n          <p>\r\n            Partially. The source code is available in{' '}\r\n            <a href=\"https://github.com/lavrton/polotno-studio\" target=\"_blank\">\r\n              GitHub repository\r\n            </a>\r\n            . The repository doesn't have full source.{' '}\r\n            <strong>Polotno Studio</strong> is powered by{' '}\r\n            <a href=\"https://polotno.dev/\" target=\"_blank\">\r\n              Polonto SDK project\r\n            </a>\r\n            . All core \"canvas editor\" functionality are implemented by{' '}\r\n            <strong>polotno</strong> npm package (which is not open source at\r\n            the time of writing this text).\r\n          </p>\r\n          <p>\r\n            Polotno Studio is build on top of Polotno SDK to provide a\r\n            desktop-app-like experience.\r\n          </p>\r\n          <h2>Who is making Polotno Studio?</h2>\r\n          <p>\r\n            My name is Anton Lavrenov{' '}\r\n            <a href=\"https://twitter.com/lavrton\" target=\"_blank\">\r\n              @lavrton\r\n            </a>\r\n            . I am founder of Polotno project. As the maintainer of{' '}\r\n            <a href=\"https://konvajs.org/\" target=\"_blank\">\r\n              Konva 2d canvas framework\r\n            </a>\r\n            , I created several similar apps for different companies around the\r\n            world. So I decided to compile all my knowledge and experience into\r\n            reusable Polotno project.\r\n          </p>\r\n          <h2>\r\n            Why Polotno Studio has no signups and no ads? How are you going to\r\n            support the project financially?\r\n          </h2>\r\n          <p>\r\n            Instead of monetizing the end-user application{' '}\r\n            <strong>Polotno Studio</strong> I decided to make money around\r\n            developers tools with{' '}\r\n            <a href=\"https://polotno.dev/\" target=\"_blank\">\r\n              Polonto SDK\r\n            </a>\r\n            .\r\n          </p>\r\n          <p>\r\n            <strong>Polotno Studio</strong> is a sandbox application and\r\n            polished demonstration of{' '}\r\n            <a href=\"https://polotno.dev/\" target=\"_blank\">\r\n              Polonto SDK\r\n            </a>{' '}\r\n            usage.\r\n          </p>\r\n          <p>\r\n            With{' '}\r\n            <a href=\"https://polotno.dev/\" target=\"_blank\">\r\n              Polonto SDK\r\n            </a>{' '}\r\n            you can build very different application with very different UI.\r\n          </p>\r\n        </div>\r\n        <div className={Classes.DIALOG_FOOTER}>\r\n          <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n            <Button onClick={() => toggleFaq(false)}>Close</Button>\r\n          </div>\r\n        </div>\r\n      </Dialog>\r\n    </Navbar>\r\n  );\r\n});","import React from 'react';\nimport Toolbar from 'polotno/toolbar/toolbar';\nimport ZoomButtons from 'polotno/toolbar/zoom-buttons';\nimport SidePanel from 'polotno/side-panel/side-panel';\nimport Workspace from 'polotno/canvas/workspace';\n\nimport Topbar from './topbar';\n\nconst App = ({ store }) => {\n  return (\n    <React.Fragment>\n      <Topbar store={store} />\n      <div\n        style={{\n          display: 'flex',\n          height: 'calc(100% - 50px)',\n          width: '100%',\n          backgroundColor: '#30404d',\n        }}\n      >\n        <div style={{ width: '400px', height: '100%', display: 'flex' }}>\n          <SidePanel store={store} />\n        </div>\n        <div\n          style={{\n            display: 'flex',\n            height: '100%',\n            margin: 'auto',\n            flex: 1,\n            flexDirection: 'column',\n            position: 'relative',\n          }}\n        >\n          <Toolbar store={store} />\n          <Workspace store={store} />\n          <ZoomButtons store={store} />\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport localforage from 'localforage';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'polotno/model/store';\n\n// if (window.innerWidth < 650) {\n//   var mvp = document.getElementById('__viewport');\n//   mvp.setAttribute(\n//     'content',\n//     'width=device-width, height=device-height, initial-scale=0.5'\n//   );\n//   alert(\n//     'Hey, looks like you opened the app from the mobile. Polotno Studio is not optimized for mobile yet. But thanks for your interest! We will have mobile support soon. For now, please use it on the desktop.'\n//   );\n// }\n\nconst store = createStore({ key: 'nFA5H9elEytDyPyvKL7T' });\nwindow.store = store;\n\n// localforage.getItem('polotno-state', function (err, json) {\n//   if (json) {\n//     store.loadJSON(json);\n//   }\n//   if (!store.pages.length) {\n//     store.addPage();\n//   }\n// });\n\n// store.on('change', () => {\n//   try {\n//     const json = store.toJSON();\n//     localforage.setItem('polotno-state', json);\n//   } catch (e) {}\n// });\n\nReactDOM.render(\n  <React.StrictMode>\n    <App store={store} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();"],"sourceRoot":""}